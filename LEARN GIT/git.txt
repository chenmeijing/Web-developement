Git is a software that allows you to keep track of changes made to a project over time. Git works by recording the changes you make to a project, storing those changes, then allowing you to reference them as needed.

1.git init
The word init means initialize. The command sets up all the tools Git needs to begin tracking changes made to the project.

A Git project can be thought of as having three parts:

A Working Directory: where you’ll be doing all the work: creating, editing, deleting and organizing files
A Staging Area: where you’ll list changes you make to the working directory
A Repository: where Git permanently stores those changes as different versions of the project

The Git workflow consists of editing files in the working directory, adding files to the staging area, and saving changes to a Git repository.In Git, we save changes with a commit.

2.git status
The command is used to check the status of changing the contents of the working directory.


3.git add filename
The command is used to add the fle to the staging area. The word filename refers to the name of the file that is editing.


4.git diff filename 
The command is used to check the differences between the working directory and the staging area.
The word filename is the actual name of the file.

5.git commit

A commit is the last step in our Git workflow. A commit permanently stores changes from the staging area inside the repository.

git commit is the command we’ll do next. However, one more bit of code is needed for a commit: the option -m followed by a message. 
git commit -m "text"

Standard Conventions for Commit Messages:

Must be in quotation marks
Written in the present tense
Should be brief (50 characters or less) when using -m.

6.git log
Commits are stored chronologically in the repository and can be viewed.

7.git show HEAD
In Git, the commit you are currently on is known as the HEAD commit. In many cases, the most recently made commit is the HEAD commit.
The output of this command will display everything the git log command displays for the HEAD commit, plus all the file changes that were committed.

8.git checkout HEAD filename
This command will restore the file in your working directory to look exactly as it did when you last made a commit.

9.git add filename_1 filename_2
In Git, it’s common to change many files, add those files to the staging area, and commit them to a repository in a single commit.

10.git reset HEAD filename
This command resets the file in the staging area to be the same as the HEAD commit. It does not discard file changes from the working directory, it just removes them from the staging area. (unstaged changes after reset M - modification)


11.git reset commit_SHA(keys)
This command works by using the first 7 characters of the SHA of a previous commit.After that, print the Git commit log again. The commits that came after the one you reset to are gone. The HEAD commit has been reassigned. You just changed history.


12.git branch 
Up to this point, you’ve worked in a single Git branch called master. Git allows us to create branches to experiment with versions of a project. Imagine you want to create version of a story with a happy ending. You can create a new branch and make the happy ending changes to that branch only. It will have no effect on the master branch until you’re ready to merge the happy ending to the master branch.

13. git branch new_branch
This command is used to create the new branch which describes the purpose of the branch (branch names can't contain whitespaces: new branch is not valid.)

14.git checkout branch_name
This command is used to switch the new branch.

15. git merge branch_name
This command is used to merge the branch_name for the update of the master. In this command, the branch_name is the giver branch since it provides the changes and the master is the receiver branch since it accepts those changes.

16. git branch -d branch_name
This command is used to delete the specified branch from the git project.

17. git clone remote_location clone_name
In this command
remote_location tells Git where to go to find the remote. This could be a web address, or a filepath.

clone_name is the name you give to the directory in which Git will clone the repository.

18. git remote -v
The command shows the origin of the list of a git project's remotes.
(fetch and push)

19.git fetch
This command will not merge changes from the remote into the local repository. It brings those changes onto what’s called a remote branch.


20.git merge origin/master

This command is used for the git merge command to integrate origin/master into your local master branch. 

The workflow for Git collaborations typically follows this order:

		1.Fetch and merge changes from the remote

		2.Create a branch to work on a new project feature

		3.Develop the feature on your branch and commit your work

		4.Fetch and merge from the remote again (in case new commits were made while you were working)

		5.Push your branch up to the remote for review

Steps 1 and 4 are a safeguard against merge conflicts, which occur when two branches contain file changes that cannot be merged with the git merge command. Step 5 involves git push

21. git push origin branch_name
This command will push the branch up to the remote, origin. 

